<?xml version="1.0"?>
<ruleset name="Custom">
    <description>Custom Coding Standards</description>

    <rule ref="Internal.NoCodeFound">
        <severity>0</severity>
    </rule>

    <!--<rule ref="Generic.CodeAnalysis.UnusedFunctionParameter.Found">
        <type>error</type>
    </rule>-->
    <rule ref="Generic.Arrays.DisallowLongArraySyntax.Found" />

    <rule ref="Generic.CodeAnalysis.EmptyStatement" />
    <rule ref="Generic.CodeAnalysis.EmptyStatement.DetectedIF">
        <severity>0</severity>
    </rule>
    <rule ref="Generic.CodeAnalysis.ForLoopShouldBeWhileLoop" />
    <rule ref="Generic.CodeAnalysis.ForLoopWithTestFunctionCall" />
    <rule ref="Generic.CodeAnalysis.JumbledIncrementer" />
    <rule ref="Generic.CodeAnalysis.UnconditionalIfStatement" />
    <rule ref="Generic.CodeAnalysis.UnnecessaryFinalModifier" />
    <rule ref="Generic.CodeAnalysis.UnusedFunctionParameter" />
    <rule ref="Generic.CodeAnalysis.UselessOverridingMethod" />

    <rule ref="Generic.Classes.DuplicateClassName" />
    <rule ref="Generic.Commenting.Fixme" />
    <rule ref="Generic.Commenting.Todo" />
    <rule ref="Generic.Formatting.SpaceAfterCast" />

    <rule ref="Internal.LineEndings.Mixed">
        <type>error</type>
    </rule>

    <rule ref="Generic.NamingConventions.ConstructorName" />
    <rule ref="Generic.NamingConventions.UpperCaseConstantName" />
    <rule ref="Generic.PHP.DeprecatedFunctions" />
    <rule ref="Generic.PHP.NoSilencedErrors" />
    <!-- PHP code MUST use the long <?php ?> tags or the short-echo <?= ?> tags
         It MUST NOT use other tag variations. -->
    <rule ref="Generic.PHP.DisallowShortOpenTag">
        <!-- Optional -->
        <exclude name="Generic.PHP.DisallowShortOpenTag.EchoFound" />
    </rule>

    <!-- PHP code MUST use only UTF-8 without BOM. -->
    <rule ref="Generic.Files.ByteOrderMark" />
    <!-- Class names MUST be declared in StudlyCaps. -->
    <rule ref="Squiz.Classes.ValidClassName" />
    <!-- Check usage of `self::`. -->
    <rule ref="Squiz.Classes.SelfMemberReference" />
    <!-- Method names SHOULD be declared in camelCase. -->
    <rule ref="Generic.NamingConventions.CamelCapsFunctionName" />
        <!-- Reduce errors to warnings for methods not in camel caps format. -->
        <rule ref="Generic.NamingConventions.CamelCapsFunctionName.ScopeNotCamelCaps">
            <type>warning</type>
        </rule>

    <rule ref="Squiz.Arrays.ArrayBracketSpacing" />
    <rule ref="Squiz.Arrays.ArrayDeclaration">
        <exclude name="Squiz.Arrays.ArrayDeclaration.SingleLineNotAllowed" />
        <!-- Optional -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.MultiLineNotAllowed" />
        <exclude name="Squiz.Arrays.ArrayDeclaration.FirstIndexNoNewline" />
        <exclude name="Squiz.Arrays.ArrayDeclaration.FirstValueNoNewline" />
        <exclude name="Squiz.Arrays.ArrayDeclaration.IndexNoNewline" />
        <exclude name="Squiz.Arrays.ArrayDeclaration.ValueNoNewline" />
        <exclude name="Squiz.Arrays.ArrayDeclaration.CloseBraceNewLine" />
        <exclude name="Squiz.Arrays.ArrayDeclaration.KeyNotAligned" />
        <exclude name="Squiz.Arrays.ArrayDeclaration.ValueNotAligned" />
        <exclude name="Squiz.Arrays.ArrayDeclaration.CloseBraceNotAligned" />
        <exclude name="Squiz.Arrays.ArrayDeclaration.SpaceBeforeDoubleArrow" />
        <exclude name="Squiz.Arrays.ArrayDeclaration.SpaceAfterComma" />
        <exclude name="Squiz.Arrays.ArrayDeclaration.NoCommaAfterLast" />
    </rule>
    <rule ref="Squiz.Strings.ConcatenationSpacing">
        <properties>
            <property name="spacing" value="1" />
            <property name="ignoreNewlines" value="true" />
        </properties>
    </rule>
    <rule ref="Squiz.Strings.DoubleQuoteUsage.ContainsVar">
        <severity>0</severity>
    </rule>
    <rule ref="Squiz.Strings.EchoedStrings" />

    <rule ref="CustomPHPCS.ControlStructures.AssignmentInCondition" />
    <rule ref="Squiz.ControlStructures.InlineIfDeclaration">
        <!-- Optional -->
        <exclude name="Squiz.ControlStructures.InlineIfDeclaration.SpacingBeforeThen" />
        <exclude name="Squiz.ControlStructures.InlineIfDeclaration.SpacingAfterThen" />
        <exclude name="Squiz.ControlStructures.InlineIfDeclaration.SpacingBeforeElse" />
        <exclude name="Squiz.ControlStructures.InlineIfDeclaration.SpacingAfterElse" />
        <exclude name="Squiz.ControlStructures.InlineIfDeclaration.NotSingleLine" />
    </rule>
    <rule ref="Squiz.ControlStructures.SwitchDeclaration" />

    <!-- Method names MUST NOT be declared with a space after the method name.
         The opening brace MUST go on its own line, and the closing brace MUST
         go on the next line following the body. There MUST NOT be a space after
         the opening parenthesis, and there MUST NOT be a space before the closing parenthesis. -->
    <rule ref="PEAR.Functions.FunctionDeclaration">
        <!-- Optional -->
        <exclude name="PEAR.Functions.FunctionDeclaration.SpaceAfterFunction" />
        <exclude name="PEAR.Functions.FunctionDeclaration.SpaceAfterUse" />
        <exclude name="PEAR.Functions.FunctionDeclaration.BraceOnNewLine" />
        <exclude name="PEAR.Functions.FunctionDeclaration.BraceOnSameLine" />
    </rule>

    <rule ref="Squiz.Operators.IncrementDecrementUsage" />
    <rule ref="Squiz.Operators.ValidLogicalOperators" />

    <rule ref="Squiz.WhiteSpace.LanguageConstructSpacing" />
    <rule ref="Squiz.WhiteSpace.LogicalOperatorSpacing" />
    <rule ref="Squiz.WhiteSpace.OperatorSpacing">
        <!-- Optional -->
        <exclude name="Squiz.WhiteSpace.OperatorSpacing.SpacingBefore" />
    </rule>
    <rule ref="Squiz.WhiteSpace.SemicolonSpacing" />
    <!-- PSR-2 ignores trailing whitespace at the end of blank lines but let's keep things tidy. -->
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace" />

    <rule ref="Squiz.Commenting.ClassComment">
        <!-- Optional -->
        <exclude name="Squiz.Commenting.ClassComment.Missing" />
    </rule>
    <rule ref="Squiz.Commenting.DocCommentAlignment" />
    <rule ref="Squiz.Commenting.EmptyCatchComment" />
    <rule ref="Squiz.Commenting.FunctionCommentThrowTag" />
    <rule ref="Squiz.Commenting.VariableComment" />
    <rule ref="Squiz.Commenting.FunctionComment">
        <!-- Optional -->
        <exclude name="Squiz.Commenting.FunctionComment.EmptyThrows" />
        <exclude name="Squiz.Commenting.FunctionComment.MissingParamComment" />
        <exclude name="Squiz.Commenting.FunctionComment.ParamCommentFullStop" />
    </rule>

        <!-- Reduce errors to warnings for missing comments. -->
        <rule ref="Squiz.Commenting.FunctionComment.Missing">
            <type>warning</type>
        </rule>
        <rule ref="Squiz.Commenting.FunctionComment.MissingParamName">
            <type>warning</type>
        </rule>
        <rule ref="Squiz.Commenting.FunctionComment.MissingParamTag">
            <type>warning</type>
        </rule>
        <rule ref="Squiz.Commenting.FunctionComment.TypeHintMissing">
            <type>warning</type>
        </rule>
        <rule ref="Squiz.Commenting.VariableComment.Missing">
            <type>warning</type>
        </rule>

    <!-- Other -->
    <rule ref="Generic.PHP.DeprecatedFunctions" />
    <rule ref="Squiz.PHP.DiscouragedFunctions" />
    <rule ref="Squiz.PHP.NonExecutableCode" />
    <rule ref="Squiz.Scope.StaticThisUsage" />

    <exclude-pattern>*/.git/*</exclude-pattern>
</ruleset>